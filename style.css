body {
    background: #20262E;
    padding: 20px;
    font-family: Helvetica;
}

#app {
    background: #fff;
    border-radius: 4px;
    padding: 20px;
    transition: all 0.2s;
}

li {
    margin: 8px 0;
}

h2 {
    font-weight: bold;
    margin-bottom: 15px;
}

del {
    color: rgba(0, 0, 0, 0.3);
}

.dropdown-menu {
    display: block;
    z-index: 99999;
    left: initial;
    right: 0;
}

.tablewrapper table.scrolling {
    display: flex;
    flex-direction: column;
    flex: 1 1 auto;
    width: 100%;
    height: 100%;
    border-collapse: collapse;
    overflow: hidden;
    /* Use this to create a "dead" area color if table is too wide for cells */
    background-color: #ccc;
    --dead-area-color: #ccc;
}

.tablewrapper table.scrolling thead,
.tablewrapper table.scrolling tfoot {
    /* Grow automatically to fit content, don't shrink it proportionately to the body. */
    flex: 0 0 auto;
    display: block;
    /* Horizontal scrolling, when allowed, is controlled by JS, not a scroll bar. */
    overflow: hidden;
}

.tablewrapper table.scrolling tbody {
    display: block;
    flex: 1 1 auto;
    /* Disable all scrolling by default */
    overflow: hidden;
}


/* Turn on vertical scrolling for all elements so scroll bars take up the same space */

.tablewrapper table.scrolling.scrolly tbody,
.tablewrapper table.scrolling.scrolly thead.scrollsync,
.tablewrapper table.scrolling.scrolly tfoot.scrollsync {
    overflow-y: scroll;
}


/* Turn on horizontal scrolling for the body only */

.tablewrapper table.scrolling.scrollx tbody {
    overflow-x: scroll;
}


/*
For Webkit, use "dead area" color to hide vertical scrollbar functions in the header and footer.
Since WebKit supports CSS variables and style attributes don't support pseudo-classes, use variables.
Display is set because otherwise Chrome ignores the other styling.
TODO: on Chrome/Safari for Mac, scrollbars are not shown anyway and this creates an extra block. No impact on iOS Safari.
*/

.tablewrapper table.scrolling.scrolly thead.scrollsync::-webkit-scrollbar {
    display: block;
    background-color: var(--dead-area-color);
}

.tablewrapper table.scrolling.scrolly thead.scrollsync::-webkit-scrollbar-track {
    background-color: var(--dead-area-color);
}


/* IE11 adds an extra tbody, have to hide it. */

.tablewrapper table.scrolling tbody:nth-child(3) {
    display: none;
}


/* The one caveat to scrolling this way: a hard-set width is required. Can override in thead/tbody slot. */

.tablewrapper table.scrolling td,
.tablewrapper table.scrolling th {
    border: 1px solid #ddd;
    /* These must all be set the same in your overriding CSS */
    width: 10em;
    min-width: 10em;
    max-width: 10em;
    /* Important in case your data is too long for your cell */
    overflow: hidden;
    word-wrap: break-word;
    min-height: 30em;
}

.tablewrapper table.scrolling td {
    background-color: #fff;
}

.tablewrapper table.scrolling th {
    background-color: #f7f7f7;
}

.tablewrapper table.scrolling {
    max-height: 400px;
    /* max-width: 500px */
}

.tablewrapper {
    display: inline-block;
    position: relative;
    width: 100%;
    height: 100%;
}

.tablewrapper>div {
    display: inline-block;
}

.tablewrapper div[class^="table"] table.scrolling.scrolly tbody {
    overflow-x: hidden;
    scrollbar-width: none;
}

.tablewrapper div[class^="table"] table.scrolling.scrolly tbody::-webkit-scrollbar {
    display: none;
}

.tablewrapper div[class^="table"] table {
    background-color: inherit;
    --dead-area-color: inherit;
}

.tablewrapper div[class^="table"] table.scrolling.scrolly thead.scrollsync {
    overflow: hidden;
}

.tablewrapper div[class^="table"] {
    position: absolute;
    top: 0;
    left: 0;
    z-index: 9999;
}

.tablewrapper div.tableright {
    right: 0;
    left: initial;
}

.tablewrapper div.tableselection {
    position: relative;
    z-index: 99999;
}

.tablewrapper div.normal {
    width: 100%;
    position: relative;
}

.tablewrapper div.normal table.scrolling.scrolly tbody {
    overflow-x: scroll;
    margin-bottom: initial;
}

.tablewrapper table.scrolling a.btn {
    line-height: initial;
    padding: 0;
}